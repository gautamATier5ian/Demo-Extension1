{"version":3,"sources":["components/eyeComponent/eye.js","App.js","index.js"],"names":["Eye","props","format","time","hrs","mins","secs","ret","increaseTime","currentTime","Date","parse","increaseByOne","state","timeInMinutes","setState","breakTime","tickTick","timer","deadline","timeInSeconds","_this","test","interval","setInterval","console","log","final","toString","alert","clearInterval","x","onClick","this","style","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"oPA2FeA,E,YAzFb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAaRC,OAAS,SAACC,GAEN,IAAIC,KAASD,EAAO,MAChBE,KAAWF,EAAO,KAAQ,IAC1BG,IAASH,EAAO,GAGhBI,EAAM,GAMV,OALIH,EAAM,IACNG,GAAYH,EAAM,KAAOC,EAAO,GAAK,IAAM,KAE/CE,GAAYF,EAAO,KAAOC,EAAO,GAAK,IAAM,IAC5CC,GAAO,GAAKD,GA1BE,EA6BlBE,aAAa,WACX,IACIC,EAAcC,KAAKC,MAAM,IAAID,MAC7BE,EAAgB,EAAKC,MAAMC,cAAe,EAC1C,EAAKC,SAAS,CAChBC,UAAY,EAAKH,MAAMG,UAAY,EACnCC,SAAyC,IAA5B,EAAKJ,MAAMG,UAAY,GACpCE,OAAQ,EACRT,YAAcC,KAAKC,MAAM,IAAID,MAC7BI,cAAgBF,EAChBO,SAAc,IAAIT,KAAKD,EAA6B,GAAfG,EAAkB,KACvDQ,cAAgC,GAAhBR,IAIlB,EAAKM,SA5CW,EA8CpBA,MAAQ,WAEN,IAAIG,EAAK,eACLC,EAAO,GAELC,EAAWC,aAAY,WAM5B,GALAF,GAAa,EAEZG,QAAQC,IAAI,OAAOL,EAAMnB,OAAOoB,IAG9B,QAAUD,EAAMR,MAAMc,MAAMC,WAE3B,OADCC,MAAM,qCACAC,cAAcP,GAMxB,IAAIQ,EAAIV,EAAMR,MAAMO,cAAgB,EACpCC,EAAMN,SAAS,CACbE,SAAWI,EAAMR,MAAMI,SAAS,EAChCE,SAAWE,EAAMR,MAAMM,SAAW,IAClCC,cAAmBW,EACnBJ,MAAQN,EAAMnB,OAAO6B,OAEtB,MAtED,EAAKlB,MAAQ,CACXG,UAAY,EACZE,OAAS,EACTD,SAAW,IACXR,YAAcC,KAAKC,MAAM,IAAID,MAC7BS,SAAW,EACXL,cAAgB,EAChBM,cAAgB,EACjBO,MAAQ,GAVO,E,sEA6EhB,OACE,6BAEE,4BAAQK,QAAWC,KAAKzB,cAAxB,yCAIA,0BAAM0B,MAAO,CAAC,MAAU,QAAxB,eAA6CD,KAAKpB,MAAMK,MAAQe,KAAKf,OAASe,KAAKpB,MAAMc,MAAM,IAA/F,IAAoG,mC,GArF1FQ,IAAMC,WCeTC,MATf,WACE,OACE,6BACI,kBAAC,EAAD,QCJRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.96d2a9fd.chunk.js","sourcesContent":["import React from 'react'\nclass Eye extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      breakTime : 0,\n      timer  : false,\n      tickTick : 10*60,\n      currentTime : Date.parse(new Date()),\n      deadline : 0,\n      timeInMinutes : 0,\n      timeInSeconds : 0,\n     final : 0\n    }\n  }\n\n  format = (time) => {   \n      // Hours, minutes and seconds\n      var hrs = ~~(time / 3600);\n      var mins = ~~((time % 3600) / 60);\n      var secs = ~~time % 60;\n\n      // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n      var ret = \"\";\n      if (hrs > 0) {\n          ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n      }\n      ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n      ret += \"\" + secs;\n      return ret;\n  }\n  increaseTime=() => {\n    var timeInMinutes = 1;\n    var currentTime = Date.parse(new Date());\n    let increaseByOne = this.state.timeInMinutes +1\n        this.setState({\n      breakTime : this.state.breakTime + 1,\n      tickTick  : (this.state.breakTime + 1 )* 60,\n      timer : true,\n      currentTime : Date.parse(new Date()),\n      timeInMinutes : increaseByOne,\n      deadline     :new Date(currentTime + increaseByOne *60*1000),\n      timeInSeconds : increaseByOne * 60\n      \n\n    })\n    this.timer()\n  }\ntimer = () => {\n  // alert('called')\n  let _this = this\n  let test = 60\n  // alert(\"dg\")\n  const interval = setInterval(function(){\n   test = test -1\n   \n    console.log(\"tick\",_this.format(test) )\n  // alert(test- 1)\n      \n   if(\"0:00\" == _this.state.final.toString()){\n        alert(\"Its Time To take care of your eye\")\n       return clearInterval(interval)\n      }\n\n    //  let current = (this.state.breakTime * 60) - 1\n    //  console.log(\"current\",current)\n\n    let x = _this.state.timeInSeconds - 1\n    _this.setState({\n      tickTick : _this.state.tickTick-1,\n      deadline : _this.state.deadline - 1000,\n      timeInSeconds    : x,\n      final : _this.format(x)\n    })\n   },1000)\n  }\n\n\n  render() {\n    return (\n      <div>\n        {/* <span>Take break every {this.state.timeInMinutes} Minute</span> */}\n        <button onClick = {this.increaseTime}>CLick here to increase timer by 1 min</button>\n       \n\n        {/* <span>currentTime : {this.state.currentTime}</span> */}\n        <span style={{\"color\" : \"red\"}}>Deadline :  {this.state.timer?  this.timer && this.state.final:' '} <br/></span>\n      </div>\n    )\n  }\n}\nexport default Eye","import React from 'react';\n// import logo from './logo.svg';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// import FormPage from './components/form'\nimport Eye from './components/eyeComponent/eye'\n\nfunction App() {\n  return (\n    <div>\n        <Eye/>\n    </div>\n  \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}